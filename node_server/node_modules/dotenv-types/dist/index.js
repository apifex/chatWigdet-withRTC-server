#!/usr/bin/env node
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var commander_1 = __importDefault(require("commander"));
var dotenv_1 = __importDefault(require("dotenv"));
var pjson_1 = require("pjson");
var path_1 = __importDefault(require("path"));
var fs_1 = __importDefault(require("fs"));
var log_1 = require("./utils/log");
var format_1 = require("./utils/format");
var cli = commander_1.default
    .version(pjson_1.version)
    .option("-F, --file <file>", "Your .env file")
    .option("-f, --filename <filename>", "Output filename")
    .option("-d, --directory <dir>", "Output directory")
    .parse(process.argv);
var main = function () { return __awaiter(void 0, void 0, void 0, function () {
    var DEFAULT_DOTENV_FILENAME, DEFAULT_DOTENV_DIRECTORY, DEFAULT_DEFINITION_FILENAME, DEFAULT_DEFINITION_DIRECTORY, dotenvFilename, outputFilename, dotenvPath, outputPath, outputDirectory, dotenvBuffer, parsedDotenv, keys_1, output, dir;
    return __generator(this, function (_a) {
        DEFAULT_DOTENV_FILENAME = ".env";
        DEFAULT_DOTENV_DIRECTORY = process.cwd();
        DEFAULT_DEFINITION_FILENAME = "env.d.ts";
        DEFAULT_DEFINITION_DIRECTORY = process.cwd();
        dotenvFilename = cli.file || DEFAULT_DOTENV_FILENAME;
        outputFilename = cli.filename || DEFAULT_DEFINITION_FILENAME;
        dotenvPath = cli.file ? path_1.default.join(process.cwd(), cli.file) : path_1.default.join(DEFAULT_DOTENV_DIRECTORY, DEFAULT_DOTENV_FILENAME);
        outputPath = path_1.default.join(DEFAULT_DEFINITION_DIRECTORY, cli.directory || "", outputFilename);
        outputDirectory = path_1.default.dirname(outputPath);
        if ((cli.filename && cli.filename === DEFAULT_DOTENV_FILENAME) ||
            (cli.file && cli.filename && path_1.default.basename(cli.file) === cli.filename)) {
            log_1.log.error("The output filename should not match the dotenv file!");
            return [2 /*return*/];
        }
        try {
            dotenvBuffer = fs_1.default.readFileSync(dotenvPath);
            parsedDotenv = dotenv_1.default.parse(dotenvBuffer);
            keys_1 = Object.keys(parsedDotenv);
            output = "\n            // Generated using https://www.npmjs.com/package/dotenv-types\n\n            declare namespace NodeJS {\n                export interface ProcessEnv {\n                    <REPLACE>\n                }\n            }\n        ".replace("<REPLACE>", keys_1.map(function (key, index) { return (key + ": string; " + (index !== keys_1.length - 1 ? "\n" : "")); }).join(""));
            try {
                dir = fs_1.default.opendirSync(outputDirectory);
                dir.closeSync();
            }
            catch (error) {
                fs_1.default.mkdirSync(outputDirectory);
            }
            fs_1.default.writeFileSync(outputPath, format_1.format(output));
            log_1.log.success("Generated " + outputFilename + " successfully!");
        }
        catch (error) {
            if (error.code) {
                if (error.code === "ENOENT") {
                    log_1.log.error("Could not find " + dotenvFilename + "!");
                    return [2 /*return*/];
                }
            }
        }
        return [2 /*return*/];
    });
}); };
main();
